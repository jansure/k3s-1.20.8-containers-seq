// Code generated for package deploy by go-bindata DO NOT EDIT. (@generated)
// sources:
// manifests/ccm.yaml
// manifests/coredns.yaml
// manifests/local-storage.yaml
// manifests/metrics-server/aggregated-metrics-reader.yaml
// manifests/metrics-server/auth-delegator.yaml
// manifests/metrics-server/auth-reader.yaml
// manifests/metrics-server/metrics-apiservice.yaml
// manifests/metrics-server/metrics-server-deployment.yaml
// manifests/metrics-server/metrics-server-service.yaml
// manifests/metrics-server/resource-reader.yaml
// manifests/rolebindings.yaml
// manifests/traefik.yaml
// +build !no_stage

package deploy

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ccmYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x93\x3f\x6f\xe3\x30\x0c\xc5\x77\x7d\x0a\x21\x4b\x80\x03\x9c\xe0\xb6\x83\xc7\xeb\xd0\x3d\x40\xbb\xd3\x12\x9b\xa8\x91\x45\x81\xa4\x1c\xb4\x9f\xbe\x70\x9c\x16\x81\xdd\xfc\x71\x36\xc2\x20\x7f\xef\xd1\xd4\x83\x1c\x5e\x91\x25\x50\xaa\x2d\x37\xe0\x56\x50\x74\x47\x1c\x3e\x41\x03\xa5\xd5\xfe\x9f\xac\x02\xad\xbb\xbf\x66\x1f\x92\xaf\xed\x53\x2c\xa2\xc8\x1b\x8a\x68\x5a\x54\xf0\xa0\x50\x1b\x6b\x13\xb4\x58\x5b\x17\xa9\xf8\xca\x51\x52\xa6\x18\x91\xab\x16\x12\x6c\x91\x0d\x97\x88\x52\x9b\xca\x42\x0e\xcf\x4c\x25\x4b\x3f\x54\x59\x47\xc4\x3e\xa4\x73\x2d\x63\x2d\xa3\x50\x61\x87\xa7\xa6\x88\x20\x28\xc6\xda\x0e\xb9\x39\x7d\xdb\xa2\x0e\x00\x46\x50\x3c\x96\x25\xfb\xbe\x9c\x68\x2c\x16\x53\x24\x76\x98\x74\x84\x3c\x43\x65\x50\xb7\x9b\x0d\x4d\xe4\xc7\x36\x97\x7f\x96\x33\x66\xd7\xa2\xa0\x65\x84\x18\xbc\xdc\x05\x11\xe4\x2e\xb8\xb1\x87\x18\x44\x7f\xdf\xaa\x2f\x0f\xb3\xf1\xe0\x1c\x95\x4b\x7f\xef\x2e\x50\xee\x1f\x9c\x28\x26\xed\x28\x96\xf6\xd2\x6d\x7f\x8c\x3f\x66\x17\x93\xcf\x14\xae\x9d\x79\x22\x74\x98\xdc\xbd\xaa\xcc\xe3\x09\xf9\x1f\x92\x0f\x69\x3b\x2b\x28\x14\x71\x83\x6f\x7d\xe7\xf7\x8a\x57\x54\x8d\xb5\xd3\x58\xde\xd4\x90\xd2\xbc\xa3\xd3\x63\x1e\x87\xf1\x17\x41\xbe\x3d\x37\x34\x48\x06\x87\xb5\xdd\x97\x06\x2b\xf9\x10\xc5\xd6\x7c\x05\x00\x00\xff\xff\xff\xea\xf1\x4c\x44\x04\x00\x00")

func ccmYamlBytes() ([]byte, error) {
	return bindataRead(
		_ccmYaml,
		"ccm.yaml",
	)
}

func ccmYaml() (*asset, error) {
	bytes, err := ccmYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ccm.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _corednsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\x5f\x6f\xe3\xb8\x11\x7f\xf7\xa7\x20\x04\xec\x5b\xe5\xc4\x17\xec\x35\xe5\x5b\xce\x76\xef\x82\x5e\x7c\x46\x9c\xdc\x4b\x51\x2c\xc6\xd4\xd8\x62\x43\x71\x58\x92\xf2\xc6\xbd\xe6\xbb\x17\xd4\x3f\x8b\x8a\x1c\x64\x83\x3d\xbe\xd8\xd2\x70\xfe\xe8\x37\xc3\xdf\x0c\xc1\xc8\xdf\xd1\x3a\x49\x9a\xb3\xc3\x6c\xf2\x24\x75\xc6\xd9\x06\xed\x41\x0a\xbc\x11\x82\x4a\xed\x27\x05\x7a\xc8\xc0\x03\x9f\x30\xa6\xa1\x40\xce\x04\x59\xcc\xb4\x6b\x9e\x9d\x01\x81\x9c\x3d\x95\x5b\x4c\xdd\xd1\x79\x2c\x26\x69\x9a\x4e\xfa\xa6\xed\x16\xc4\x14\x4a\x9f\x93\x95\xff\x05\x2f\x49\x4f\x9f\xae\xdd\x54\xd2\xc5\x61\xb6\x45\x0f\xad\xe7\xb9\x2a\x9d\x47\x7b\x4f\x0a\x23\xb7\x0a\xb6\xa8\x5c\xf8\xc7\x2a\x3f\x56\xa3\xc7\x4a\x7f\x4b\xe4\x9d\xb7\x60\x8c\xd4\xfb\xda\x51\x9a\xe1\x0e\x4a\xe5\x5d\x17\x6f\x1d\x15\x6f\xc3\xb6\xa5\x42\xc7\x27\x29\x03\x23\x7f\xb6\x54\x9a\xca\x72\xca\x92\x64\xc2\x98\x45\x47\xa5\x15\xd8\xbc\x43\x9d\x19\x92\xba\x32\x96\x32\x57\x23\x53\x3f\x18\xca\xea\x3f\x1d\x08\xe1\xf1\x80\x76\xdb\xe8\x2a\xe9\x7c\xf5\xe7\x2b\x78\x91\xbf\xcf\x9f\xa6\x6c\x68\x66\x8f\xfe\x7b\x00\xfa\x93\xd4\x99\xd4\xfb\x08\x57\xd0\x9a\x7c\xa5\xde\x80\x3b\x66\x37\xc2\x1b\x4a\x4f\xa5\xc9\xc0\x23\x67\x89\xb7\x25\x26\xdf\x3f\x3d\xa4\xf0\x1e\x77\x55\x7c\x0d\x60\x6f\x7c\xf0\x84\xb1\xd7\xb5\x73\xc6\xb2\x2b\xb7\xff\x46\xe1\xab\xdc\x8f\x96\xfa\x87\x0b\xbc\x3b\x3b\x73\xd2\x3b\xb9\xbf\x03\xf3\x91\x63\xd3\x6e\x9f\x93\xc5\x9d\x54\xc8\xd9\xff\x2a\x4c\xa7\xfc\xf3\x15\xfb\xa3\xfa\x1b\x16\x5a\x4b\xd6\x75\x8f\x39\x82\xf2\x79\xf7\x68\x11\xb2\x63\xf7\x74\x4a\x07\xfb\xf4\xc7\xfc\xd7\xc7\xcd\xc3\xf2\xfe\xcb\xe2\xb7\xbb\x9b\xdb\xd5\xcb\x27\x26\x75\x0a\x59\x66\xa7\x60\x0d\x30\x69\x7e\xac\xff\x9c\x3c\xb1\xaa\xc8\x99\xd4\x0e\x45\x69\xb1\xf7\x7e\x07\x4a\xf9\xdc\x52\xb9\xcf\xc7\xad\x74\x7b\x5f\x4e\x81\x92\xf3\x8e\x5d\xa0\x17\x17\x0d\x14\x17\x2b\xca\xf0\x97\xea\x75\xdf\xa9\xf7\x8a\xfd\x78\xd9\x7b\x61\x51\x11\x64\x6c\xf6\xd9\x8d\x87\x30\xe2\xcc\x58\x2a\xd0\xe7\x58\x3a\xc6\xff\x36\xfb\x7c\xd5\x09\x76\x64\xbf\x82\xcd\xd8\xb4\x8e\x24\x9c\x3f\x75\x98\x0a\xd2\xbb\x6e\x8b\x00\x91\x23\xbb\x3a\x45\xa0\x88\xcc\x24\x0e\xa6\x27\x83\x6c\x0b\x0a\xb4\xa8\xf1\x79\x79\x55\x1c\x60\x8c\xbb\xe8\x2a\x64\x81\x46\xd1\xb1\xc0\x8f\x31\xeb\xe0\xb0\x5d\xbb\x14\x8c\x69\xb6\xd4\x8a\xc3\x23\x58\x1b\x4e\x42\x4d\x2d\x56\x9b\x64\xe2\x0c\x0a\x5e\x11\x8f\x51\x52\x80\xe3\xec\x87\x09\x63\xe1\x90\x7a\xdc\x1f\x6b\xbb\xfe\x68\x90\xb3\x7b\x52\x4a\xea\xfd\x63\x75\xdc\x6b\x7a\xe8\xbf\xe1\x0d\x04\x05\x3c\x3f\x6a\x38\x80\x54\xb0\x0d\x35\x3b\x0b\xe6\x50\xa1\xf0\x64\xeb\x3d\x45\xe0\xbf\x5f\x7b\x71\x8f\x47\xee\xb1\x30\xaa\x33\xdc\x07\xa7\xc2\x39\xd2\x3f\xf7\xed\xed\xd7\xd5\x25\x20\xc9\x4a\x7f\x9c\x2b\x70\x6e\x55\xc3\x50\xc3\x98\x8a\x9a\x2c\x52\x61\xa5\x97\x02\x54\xd2\xa8\xb8\x88\x0f\x56\x83\x9c\x84\x05\xbb\x9d\xd4\xd2\x1f\x4f\x81\x18\xca\x6e\xb4\x97\x37\xaf\x04\x21\x02\xdc\xa1\xb5\x98\x2d\x4a\x2b\xf5\x7e\x23\x72\xcc\xca\x80\xe0\xed\x5e\x53\xf7\x7a\xf9\x8c\xa2\x0c\x94\xd6\x57\xad\xfa\x06\xca\x7d\xee\x39\x9b\x5d\x5e\x46\x92\xda\x67\xe3\xef\x01\x6d\xc1\x07\xe2\x06\xad\x4d\x94\x85\x78\x55\x39\x59\x3e\x1b\x8b\xce\x9d\xf8\x7f\xb8\x52\xf6\x84\x47\xde\x62\x3d\xba\x85\x31\x32\x68\x21\xb8\x61\xb7\xfa\xcc\x96\x03\xa8\x12\xcf\xf8\x68\xfc\xf4\xb3\xd8\x5f\x9e\x0c\x29\xda\x1f\xff\x51\x05\x12\x95\x76\x20\x94\x50\xde\x93\x76\xa7\x0a\x81\xc4\x5f\xd3\x7c\x41\x32\x6f\x32\x7d\x93\x65\xa4\xdd\x6f\x5a\x1d\x93\xc9\xd8\x27\x24\xcb\x67\xe9\xbc\x4b\x5e\x19\x08\x9d\x39\x0d\xbd\x69\xd0\x11\x05\x69\x6f\x49\xa5\x46\x81\xc6\x77\xda\x64\x0c\x77\x3b\x14\x9e\xb3\x64\x45\x4d\x55\xe0\xfb\x5d\x16\x10\x8a\xf7\x7b\xf8\x0a\x1e\x5e\x57\x49\x98\x20\x06\x2e\xc9\x71\xa6\xa4\x2e\x9f\xbb\x4d\x6f\x07\xd7\x9b\x0e\xc2\x0a\x20\x81\xd4\x68\xbb\xcc\xa4\xaf\x18\xaf\x5e\xb2\x80\x3d\x72\x66\x41\x8b\x1c\x6d\xdb\x28\xd2\xe6\x97\xcf\xa6\xd7\xd3\xcb\x78\xf3\xba\x54\x6a\x4d\x4a\x8a\x23\x67\xb7\xbb\x15\xf9\xb5\x45\x87\x55\x37\xaf\x57\x34\x62\xb5\x4b\xc9\x42\xfa\x41\x45\x16\x58\x90\x3d\x72\x36\xfb\xeb\xe5\x9d\x8c\xda\xcf\x7f\x4a\x74\xc3\xdd\xc2\x94\xd5\xd1\x2c\x46\x6d\x44\x26\xc0\xee\x1d\x67\xff\x64\x49\x1a\xfa\x4c\xf2\x17\x96\x44\x5d\xb0\xed\xf7\x09\xfb\x57\xa7\x72\x20\x55\x16\x78\x17\x68\x28\xaa\xe6\x16\xb5\x30\x66\xa4\xf5\xa6\x9e\xff\x22\xec\x5f\x83\xcf\x79\xd4\x67\xa3\x6f\x81\x2c\x54\x3f\x67\x21\x3f\x3d\x12\xb3\xb1\x9f\x2e\x63\x6b\xb2\x9e\xb3\x5e\x03\x6d\x7b\x55\x6c\xd7\x58\xf2\x24\x48\x71\xf6\xb8\x58\x7f\xab\x9d\xd4\x0b\x33\x6a\xeb\x61\xfe\x86\xad\xa8\xad\xb7\xd6\x0a\xf4\x56\x8a\xf1\xc8\xfa\xd6\xaa\x89\x26\x34\x07\xd2\x1e\x9f\x7d\x3f\xb5\xa0\x14\x7d\x5d\x5b\x79\x90\x0a\xf7\xb8\x74\x02\x54\xc5\x2a\x3c\x8c\x1c\xae\x0f\xb7\x00\x03\x5b\xa9\xa4\x97\x43\x72\x83\x2c\x1b\xb2\xf9\x6a\xf9\xf0\xe5\xa7\xdb\xd5\xe2\xcb\x66\x79\xff\xfb\xed\x7c\x19\x89\x33\x4b\x66\xa8\x00\x4a\x8d\x24\xee\x9e\xc8\xff\x5d\x2a\x6c\x66\xdb\x38\x8d\x4a\x1e\x50\xa3\x73\x6b\x4b\x5b\xec\xdb\xcb\xbd\x37\x3f\xa3\x8f\x5d\x98\xba\x50\x06\x03\x24\x6b\xca\x81\xb3\xeb\xcb\xeb\xb8\xf1\x38\x91\x63\x00\xf9\x97\x87\x87\x75\x4f\x10\xfa\x90\x04\xb5\x40\x05\xc7\x0d\x0a\xd2\x99\xe3\xf1\x00\x67\xd0\x4a\xca\x3a\xd9\xac\x2f\xf3\xb2\x40\x2a\xfd\x49\xd8\x93\xb9\x52\x08\x74\xee\x21\xb7\xe8\x72\x52\x59\x2c\xdd\x81\x54\xa5\xc5\x9e\xf4\x2a\x1a\x83\xe5\x37\x43\x11\x0f\xcf\x3d\x24\x66\xd7\xb3\x0f\x23\xf1\x06\x10\x3f\xfc\xc9\x38\x64\xda\xb5\xd4\xb8\xa8\xaf\x5d\x8d\xa0\x66\x8e\x6f\x60\x16\xd1\x5e\x6c\x62\xdc\xc6\x49\xbc\x82\xc2\x63\xe1\x86\x25\x5d\xf5\xb5\x96\xee\x86\x33\x4d\x95\x82\x51\x61\xa3\xd8\xdd\x16\x46\x35\x4f\xd2\xb3\xb7\xb3\xe6\xba\x37\x32\x78\xf7\xc6\x8f\xb3\x93\xf7\xab\xdb\xf2\xe9\x8e\x11\x1a\x5f\x5d\x29\x49\x60\xa5\x64\x44\xec\x84\x05\x73\xf6\xd6\xfc\x8e\x41\xbe\x9d\x59\x9b\x19\x35\xea\xb0\xef\x1b\xf9\xe3\xa9\x7c\xcc\x67\xe3\xe3\x76\xcd\xfb\xd7\xc5\xd5\xe6\xe5\xd3\xa4\xd7\x23\xd2\x41\x07\x30\x7d\x6a\x1f\x36\x82\x74\x84\xe6\xcf\x28\xd4\xfc\x9c\x8e\x30\xb9\x89\x09\x3f\x56\xf9\x7f\x00\x00\x00\xff\xff\x4d\x65\x34\xfe\xc5\x12\x00\x00")

func corednsYamlBytes() ([]byte, error) {
	return bindataRead(
		_corednsYaml,
		"coredns.yaml",
	)
}

func corednsYaml() (*asset, error) {
	bytes, err := corednsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "coredns.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localStorageYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x56\x4d\x6f\xe3\x36\x13\xbe\xeb\x57\xcc\xab\x77\xf7\xd0\x62\x69\xaf\xdb\xc3\xb6\x5c\xf4\xe0\xb5\x9d\x34\x40\x62\x1b\x71\xda\x1e\x82\x85\x41\x51\x63\x9b\x1b\x8a\x24\x48\xca\x59\x6f\x9a\xff\x5e\x90\x92\x1d\xc9\x71\x12\x07\x6d\x6f\xd5\x45\xe0\x70\x9e\xf9\xfe\x20\x33\xe2\x77\xb4\x4e\x68\x45\x61\xdd\x4b\x6e\x84\xca\x29\xcc\xd0\xae\x05\xc7\x3e\xe7\xba\x54\x3e\x29\xd0\xb3\x9c\x79\x46\x13\x00\xc5\x0a\xa4\x20\x35\x67\x92\x18\xe6\x57\xc4\x58\xbd\x16\x01\x8f\x96\xb8\x0a\x47\x58\x0d\xac\xd8\x9d\x61\x1c\x29\xdc\x94\x19\x12\xb7\x71\x1e\x8b\x84\x10\x92\x34\x35\xdb\x8c\xf1\x0e\x2b\xfd\x4a\x5b\xf1\x8d\x79\xa1\x55\xe7\xe6\x27\xd7\x11\xba\xbb\xee\x65\xe8\xd9\xd6\xb0\x81\x2c\x9d\x47\x7b\xa9\x25\x1e\x6f\x95\x0d\xdc\xb6\x94\xe8\x68\x42\x80\x19\x71\x6a\x75\x69\x1c\x85\xeb\x34\xfd\x9c\x00\x58\x74\xba\xb4\x1c\x23\x45\xe9\x1c\x5d\xfa\x0e\x52\x13\x6c\x73\x1e\x95\x5f\x6b\x59\x16\xc8\x25\x13\x45\xbc\xe1\x5a\x2d\xc4\xb2\x60\xc6\x45\xf8\x1a\x6d\x16\xa1\x4b\xf4\xe1\x5a\x0a\x17\xff\xb7\xcc\xf3\x55\xfa\xf9\x65\x95\xa8\x72\xa3\x85\xf2\x07\xd5\x56\x44\x9d\xef\xe9\xfa\xfe\x28\xc1\x6b\x0c\x52\x5b\x40\x6e\x91\x79\x8c\x42\x0f\xdb\xe7\xbc\xb6\x6c\x89\x75\xfc\x1f\x0b\xad\xef\xb9\x64\xce\xe1\x91\x11\xf8\xfb\xd9\xfe\x24\x54\x2e\xd4\xf2\xf8\xa4\x67\x42\xe5\x49\xc8\xfc\x25\x2e\x02\xf3\xd6\xc7\x67\xb4\x27\x00\x8f\xab\xec\x98\xda\x72\x65\xf6\x05\xb9\x8f\xe5\x75\xb0\x81\xfe\xad\xb6\x61\xc6\xb8\xee\xae\x6b\x87\x68\xa4\xde\x14\xf8\x8a\x8e\x7d\x5a\x95\x33\xc8\x69\xcc\xbd\x91\x82\x33\x47\xa1\x97\x00\x38\x94\xc8\xbd\xb6\xe1\x06\xa0\x08\xf9\x3d\x67\x19\x4a\x57\x11\x42\x98\xcd\x33\xba\x3c\x16\x46\x32\x8f\x35\xbc\x61\x64\xf8\x64\x4b\xd2\x4b\xb2\x00\xb6\x26\x86\xcf\x58\xa1\xad\xf0\x9b\x41\x28\xcb\x71\xf4\x38\xad\x3c\x21\xa1\xa3\x09\xb7\xc2\x0b\xce\x64\x5a\xf3\xbb\x56\x82\xc6\xaf\xcb\x4e\xf8\xbc\x96\x68\x63\xf5\x34\x2c\x06\x20\x70\x83\x1b\x0a\xe9\xa0\xd6\xd7\xcf\x73\xad\xdc\x44\xc9\x4d\xda\xe0\x02\xd0\x26\xa0\xb5\xa5\x90\x8e\xbe\x0a\xe7\x5d\x7a\x40\x48\xb4\x3c\x54\x58\x27\x64\xc6\x2a\xf4\x18\xbb\x84\x6b\xe5\xad\x96\xc4\x48\xa6\xf0\x15\x72\x01\x70\xb1\x40\xee\x29\xa4\x63\x3d\xe3\x2b\xcc\x4b\x89\xaf\x51\x5c\xb0\xd0\x17\xff\x94\xc6\xe0\x06\x13\x0a\xed\x2e\x82\xe4\xa5\x62\xad\x3e\x51\xb0\x25\x52\xb0\x4c\xf1\x15\xda\xee\x61\x6e\xba\x7e\xdf\x79\xdf\xe9\xfd\xdc\x46\x4d\x4b\x29\xa7\x5a\x0a\xbe\xa1\x70\xb6\x18\x6b\x3f\xb5\xe8\x70\x97\xd5\x60\x54\x51\x30\x95\x3f\xe4\x94\xbc\x64\x0d\x01\xe7\x99\xf5\x8d\x33\x21\xd5\x8a\x68\x90\xba\xe8\x79\xb7\xa2\xd6\xbf\xce\x17\xa7\xd5\x8e\xa3\x1a\xf6\x17\xa1\xc0\x5c\x53\x77\x15\x8f\x0a\x41\x2a\xa6\x46\x78\x8b\xc0\x3f\x65\x7e\x45\x5b\x0a\x76\x1c\xa8\xd6\x8f\x85\x4d\x27\xc3\xf9\xb8\x7f\x31\x9a\x4d\xfb\x83\x51\x43\xd8\x9a\xc9\x12\x4f\xac\x2e\x68\x2b\x81\x0b\x81\x32\xaf\x87\xe8\x23\x7a\xa5\x7b\xdb\xc8\x9d\xdd\x2c\x49\x9a\x5e\xbd\xc2\xa1\x8a\x7e\xc1\x4c\x5b\xdb\xa3\xaa\xa8\xe3\xbb\x3f\x0f\xdb\xbb\xeb\x61\x32\xce\x2a\x7a\x1c\x0e\xcf\xce\xc6\xb0\x28\x94\xd2\xbe\xd9\xd8\xcd\x85\xb7\xd7\x0f\xc2\x91\x1c\x17\xac\x94\x9e\xc4\x6b\x0a\xa9\xb7\x25\xa6\x49\xb3\x0e\xb7\x75\x1a\x00\x0d\x4d\x95\xef\xf5\x5e\xbb\xd0\x39\x52\xf8\x83\x09\x7f\xa2\xed\x89\xb0\xce\x0f\xb4\x72\x65\x81\x36\xb1\xd5\xcb\x63\x5b\xb4\x43\x94\xe8\x31\x7a\x5e\x2f\xab\x6d\xc8\x92\xbd\xa7\xdc\xb3\x3b\x60\x57\xa0\x4f\x8c\xff\x2d\xb0\x51\xab\x14\xfe\x24\x31\x20\x77\x75\x6e\xe2\x98\x08\x15\x70\xc1\x4c\x4a\xaf\x6b\xea\xdd\x2e\x73\xf1\x3e\xa5\xe9\x70\x74\xd2\xff\xed\xfc\x6a\x3e\xed\x5f\xfd\x3a\x3f\x99\x5c\xce\xc7\x93\xf1\xfc\xfc\x6c\x76\x35\x1a\xce\xc7\x93\xe1\x68\x96\xbe\x7b\xc0\x04\xeb\x5c\x4a\xaf\xd3\xb7\x77\x5b\xdc\xf9\x64\xd0\x3f\x9f\xcf\xae\x26\x97\xfd\xd3\x51\x94\x72\xff\x36\xbe\x3b\xc2\x77\x5f\xff\xab\xf3\x7d\xdc\x51\x3e\xac\xf9\xda\xd8\xff\xff\xaf\x9b\x09\xd5\x75\xab\x78\xba\x5d\x09\x89\xb0\x44\xaf\x8d\x77\x90\x16\xd4\x51\x43\x53\xd0\xa6\x6a\xdf\x5c\x3f\xcc\x01\xe6\x10\xde\x68\xe3\x41\xa8\x56\x2d\x9a\xef\x5a\x47\x96\x39\x2d\x4b\x1f\xe3\xf0\xcb\x9b\xc9\xf4\xaa\x7f\x79\xda\x62\xf8\xf8\xb1\x75\x74\x6d\xb8\x13\xdf\xf0\x4c\x7d\xda\x78\x74\xc7\xa0\x8b\x36\x7a\xad\x65\xa8\x9c\x97\x90\xe8\x18\xaf\xfd\x53\x55\xb7\x15\x37\xb9\xb0\x40\x0a\x78\xff\xe1\xc3\x07\x20\x06\xde\xdc\x35\x1d\xb9\x8f\xbb\x9a\xd9\x5c\xdf\xaa\xff\x22\xf9\x6c\x24\x6d\x01\xc4\x2e\x0e\xc4\x6f\x85\xd2\xa0\x9d\xea\xbc\xb3\x61\x85\xdc\x45\x71\xaf\x49\x03\xa9\xea\xe3\xa9\xce\x0f\xbe\x8a\xaa\xd6\xad\xa4\x11\x53\x33\x35\x9f\x3e\x4f\xaf\xd1\x3d\x10\x1c\x58\x9d\x22\xb3\xcc\x6e\x48\x56\xba\x4d\xa6\xbf\xd2\x5e\xe7\xc7\x1f\x3a\xbd\xe4\xaf\x00\x00\x00\xff\xff\xee\x9c\x92\x0b\x15\x0e\x00\x00")

func localStorageYamlBytes() ([]byte, error) {
	return bindataRead(
		_localStorageYaml,
		"local-storage.yaml",
	)
}

func localStorageYaml() (*asset, error) {
	bytes, err := localStorageYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "local-storage.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerAggregatedMetricsReaderYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\xcf\x31\x6b\xf4\x30\x0c\xc6\xf1\xdd\x9f\x42\x78\x7e\x93\x97\x6e\xc5\x6b\x87\xee\x1d\xba\x94\x1b\x94\xf8\x21\x27\xce\xb1\x83\x24\xe7\x68\x3f\x7d\xb9\x70\xdc\x58\x68\x27\x0d\x7f\x7e\x0f\xe8\x22\x35\x27\x7a\x29\xdd\x1c\xfa\xd6\x0a\x02\x6f\xf2\x0e\x35\x69\x35\x91\x4e\x3c\x8f\xdc\xfd\xdc\x54\xbe\xd8\xa5\xd5\xf1\xf2\x6c\xa3\xb4\xff\xfb\x53\x58\xe1\x9c\xd9\x39\x05\xa2\xca\x2b\x12\xd9\xa7\x39\xd6\xc4\xcb\xa2\x58\xd8\x91\x87\x15\xae\x32\xdb\xa0\xe0\x0c\x0d\x44\x85\x27\x14\xbb\x11\xfa\x61\xfd\xb1\x30\x78\x1b\x76\xc1\x35\x51\x74\xed\x88\xbf\x71\xc8\xe2\x7f\x71\x9c\x57\xa9\x0f\xa8\xbd\xc0\x52\x18\x88\x37\x79\xd5\xd6\x37\x4b\xf4\x11\xef\x7f\xdd\x7d\x3c\x05\x22\x85\xb5\xae\x33\x8e\xbe\xb5\x6c\xf1\x1f\xc5\xda\x32\xec\xc8\x3b\x74\x3a\xd2\x02\xbf\x95\x22\x76\xdc\x2b\xfb\x7c\x8e\xa7\xf0\x1d\x00\x00\xff\xff\xe5\x1d\x7a\x17\x89\x01\x00\x00")

func metricsServerAggregatedMetricsReaderYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerAggregatedMetricsReaderYaml,
		"metrics-server/aggregated-metrics-reader.yaml",
	)
}

func metricsServerAggregatedMetricsReaderYaml() (*asset, error) {
	bytes, err := metricsServerAggregatedMetricsReaderYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/aggregated-metrics-reader.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerAuthDelegatorYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\xbb\x4e\xc4\x40\x0c\x45\xfb\xf9\x8a\xf9\x81\x09\xda\x0e\xb9\x03\x0a\xfa\x45\xa2\x77\x26\x97\xc5\x24\x19\x47\xb6\x27\x12\x7c\x3d\x5a\x11\xd1\xf0\x68\xaf\x74\xcf\x39\xa5\x94\xc4\x9b\x3c\xc3\x5c\xb4\x51\xb6\x91\xeb\xc0\x3d\x5e\xd5\xe4\x83\x43\xb4\x0d\xf3\xad\x0f\xa2\x37\xfb\x69\x44\xf0\x29\xcd\xd2\x26\xca\x0f\x4b\xf7\x80\x9d\x75\xc1\xbd\xb4\x49\xda\x25\xad\x08\x9e\x38\x98\x52\xce\x8d\x57\x50\x5e\x11\x26\xd5\x8b\xc3\x76\x18\xf9\xbb\x07\x56\xba\xd2\xcb\x84\x05\x17\x0e\xb5\x64\xba\xe0\x8c\x97\xeb\x8b\x37\x79\x34\xed\xdb\x3f\x19\x29\xe7\x1f\x01\xdf\xbe\xdf\x05\xde\xc7\x37\xd4\x70\x4a\xe5\xf8\x3e\xc1\x76\xa9\xb8\xab\x55\x7b\x8b\x3f\x72\x8f\xd9\x37\xae\xa0\x3c\xf7\x11\xe5\x8b\x9f\x3e\x03\x00\x00\xff\xff\x69\xfc\x98\x93\x34\x01\x00\x00")

func metricsServerAuthDelegatorYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerAuthDelegatorYaml,
		"metrics-server/auth-delegator.yaml",
	)
}

func metricsServerAuthDelegatorYaml() (*asset, error) {
	bytes, err := metricsServerAuthDelegatorYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/auth-delegator.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerAuthReaderYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8f\x3d\x4e\xc4\x40\x0c\x46\xfb\x39\xc5\x5c\xc0\x41\xdb\xa1\xe9\xa0\xa1\x5f\x24\x7a\x67\xf2\x01\x26\x1b\x4f\x64\x7b\x22\xe0\xf4\x28\x68\xf9\x69\x76\x7b\xfb\x7d\xef\x11\x51\xe2\x55\x9e\x60\x2e\x4d\x4b\xb6\x91\xeb\xc0\x3d\x5e\x9b\xc9\x27\x87\x34\x1d\xe6\x5b\x1f\xa4\xdd\x6c\x87\x11\xc1\x87\x34\x8b\x4e\x25\x1f\xdb\x09\xf7\xa2\x93\xe8\x4b\x5a\x10\x3c\x71\x70\x49\x39\x2b\x2f\x28\x79\x41\x98\x54\x27\x87\x6d\x30\xda\x79\x64\xe0\x09\x76\x3e\xf1\x95\x2b\x4a\x9e\xfb\x08\xf2\x0f\x0f\x2c\xc9\xda\x09\x47\x3c\xef\x10\x5e\xe5\xc1\x5a\x5f\xaf\xe8\xa4\x9c\xff\x44\x7e\x77\xf1\x1e\xd0\x3d\x84\x78\x95\x7f\xe3\xd0\x90\xfa\xfd\xfe\xa3\xe1\x7d\x7c\x43\x0d\x2f\x89\xce\xa0\x47\xd8\x26\x15\x77\xb5\xb6\xae\x71\x21\xe5\xb2\xfe\x57\x00\x00\x00\xff\xff\xc7\x9e\x8d\xd1\x49\x01\x00\x00")

func metricsServerAuthReaderYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerAuthReaderYaml,
		"metrics-server/auth-reader.yaml",
	)
}

func metricsServerAuthReaderYaml() (*asset, error) {
	bytes, err := metricsServerAuthReaderYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/auth-reader.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerMetricsApiserviceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8f\x4d\x6a\xc4\x30\x0c\x85\xf7\x3e\x85\x2e\xe0\x74\xb2\x2b\xde\x75\x59\x68\x61\x20\x65\xf6\x1a\x8f\x3a\x08\xe3\x1f\x24\x39\x90\xdb\x97\x30\x71\xba\x13\x7a\xef\xfb\x90\xbc\xf7\x0e\x1b\xdf\x48\x94\x6b\x09\x80\x8d\x85\x9e\xac\x26\x68\x5c\xcb\x94\xde\x75\xe2\xfa\xb6\xce\x77\x32\x9c\x5d\xe2\xf2\x08\xf0\x71\xfd\x5c\x48\x56\x8e\xe4\x32\x19\x3e\xd0\x30\x38\x80\x82\x99\x02\x1c\xd5\x29\x93\x09\x47\x3d\x0c\x4e\x1b\xc5\xbd\xa4\x2f\x70\x1f\x07\x71\x34\xfd\x1e\x91\x9c\x81\x36\x8c\x14\x20\xf5\x3b\x79\xdd\xd4\x28\x3b\x80\xa7\xd4\xde\x4e\x64\xc8\x01\xd6\xf1\xc0\xb8\x14\x80\x8b\x52\xec\x42\x4b\xe2\xf6\xf3\xb5\xdc\x48\xf8\x77\x0b\x60\xd2\x69\x88\xae\xc2\x55\xd8\xb6\x6f\x2e\x9c\x7b\x0e\x30\x5f\x2e\xff\xb2\x91\xbe\xd6\x7f\x01\x00\x00\xff\xff\x25\x03\x92\xf5\x2a\x01\x00\x00")

func metricsServerMetricsApiserviceYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerMetricsApiserviceYaml,
		"metrics-server/metrics-apiservice.yaml",
	)
}

func metricsServerMetricsApiserviceYaml() (*asset, error) {
	bytes, err := metricsServerMetricsApiserviceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/metrics-apiservice.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerMetricsServerDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x52\xcd\x6e\x13\x41\x0c\xbe\xef\x53\x58\xcb\x79\x12\x10\x12\x42\x73\xab\x5a\x6e\x10\x90\x2a\x71\x77\x67\x1d\x32\xca\xcc\x78\x64\x3b\x81\x15\xe2\xdd\xd1\x74\xb7\x4b\xd2\x36\xa8\x12\xf8\x68\x7d\x7f\xfe\x71\xce\x75\x58\xe3\x57\x12\x8d\x5c\x3c\x1c\xdf\x74\xfb\x58\x06\x0f\xb7\x24\xc7\x18\xe8\x2a\x04\x3e\x14\xeb\x32\x19\x0e\x68\xe8\x3b\x80\x82\x99\x3c\x64\x32\x89\x41\x9d\x92\x1c\x49\xe6\xb6\x56\x0c\xe4\x61\x7f\xb8\x23\xa7\xa3\x1a\xe5\xee\xb1\x03\xd6\xaa\xeb\xc5\xe6\x86\x6a\xe2\x31\xd3\x3f\x59\x00\x24\xbc\xa3\xa4\x8d\x09\xb0\x7f\xaf\x0e\x6b\x7d\x42\xd7\x4a\xa1\x21\x94\x12\x05\x63\x99\xd0\x19\x2d\xec\x3e\x9e\xd0\x2f\x0b\x00\x18\xe5\x9a\xd0\x68\xa6\x9e\x04\x6e\x75\x21\x74\xab\x74\x66\xf0\x37\x0b\x80\x87\x9c\xad\xaa\x44\x96\x68\xe3\x75\x42\xd5\xcd\xbd\x7e\x3f\x0d\xed\x0a\x0f\xe4\x82\x44\x8b\x01\x53\x3f\xe3\xf5\xec\x6a\x9b\xcb\x81\x8c\x13\x09\x5a\xe4\x72\x92\xca\xc1\x9e\x46\x0f\xfd\xf5\xac\x7a\x35\x0c\x5c\xf4\x73\x49\x63\xbf\x60\x00\xb8\x36\x26\x8b\x87\xfe\xc3\x8f\xa8\xa6\xfd\x13\x81\xfb\x6c\xc2\x89\x56\xed\x4c\x52\xc8\x48\x57\x91\xd7\x81\x8b\x09\x27\x57\x13\x16\x7a\xa1\x26\x00\x6d\xb7\x14\xcc\x43\xbf\xe1\xdb\xb0\xa3\xe1\x90\xe8\xe5\x96\x19\xd5\x48\xfe\x87\xd7\x91\xd3\x21\xd3\xb2\xae\x57\x90\xdb\x8e\x21\x16\xb0\x5c\x41\x19\xbe\x13\x04\x2c\xa0\xb8\xa5\x34\xc2\x41\x09\xb6\xc2\xd9\x69\x90\xf6\x63\x10\x33\x7e\x23\x05\x2c\xc3\x9a\x05\x84\x70\x70\x5c\xd2\x08\x6d\x29\x18\x0b\x89\x76\x0f\x23\x4d\x9f\x64\xb9\xba\x21\xca\x92\x8e\x72\xb5\xf1\x26\x8a\x87\x9f\xbf\xe6\xe6\x1f\xae\x7f\x44\x7e\xf6\xea\x30\x85\xf0\x20\x58\xc2\x8e\x64\x7d\x8e\xf2\xc7\xd7\xab\xb7\xab\x77\x0b\x78\x9a\xf8\x53\x1b\xf3\xec\x4b\x9e\x8f\x07\xd3\x42\xbe\xa0\xed\x3c\xac\x2d\xd7\xae\xfb\x1d\x00\x00\xff\xff\x2c\xcf\xfd\xe4\x5e\x04\x00\x00")

func metricsServerMetricsServerDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerMetricsServerDeploymentYaml,
		"metrics-server/metrics-server-deployment.yaml",
	)
}

func metricsServerMetricsServerDeploymentYaml() (*asset, error) {
	bytes, err := metricsServerMetricsServerDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/metrics-server-deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerMetricsServerServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\xcd\x4a\x04\x31\x10\x84\xef\x79\x8a\x26\xf7\x28\xe2\x1e\x24\x57\xcf\xc2\x82\xe2\xbd\x37\x5b\x48\x98\xfc\xd1\xdd\x33\xe0\xdb\xcb\xc4\x41\x10\xe6\xd6\x54\x57\x7d\x55\x21\x04\xc7\x23\x7f\x42\x34\xf7\x16\x69\x7b\x72\x4b\x6e\xf7\x48\xef\x90\x2d\x27\xb8\x0a\xe3\x3b\x1b\x47\x47\xd4\xb8\x22\x52\x85\x49\x4e\x1a\x14\xb2\x41\x0e\x59\x07\x27\x44\x5a\xd6\x1b\x82\x7e\xab\xa1\x3a\xa2\xc2\x37\x14\xdd\x93\x34\x3f\xd2\x60\xd0\x87\xdc\x1f\x7f\x49\xfe\xed\x1f\xca\x9f\x18\x53\x59\xd5\x20\xd3\x91\xf7\x06\x6f\xb2\xc2\x3b\x1d\x48\x3b\x58\x51\x90\xac\xcb\x51\xf2\xa2\x81\xc7\x38\xd9\x38\xba\xd8\x5c\x12\xe6\x19\xe9\x72\x79\x9e\x91\x21\xdd\x7a\xea\x25\xd2\xc7\xeb\x75\x2a\xc6\xf2\x05\xbb\xfe\xb9\x7e\x02\x00\x00\xff\xff\x92\x19\xf9\x3e\x23\x01\x00\x00")

func metricsServerMetricsServerServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerMetricsServerServiceYaml,
		"metrics-server/metrics-server-service.yaml",
	)
}

func metricsServerMetricsServerServiceYaml() (*asset, error) {
	bytes, err := metricsServerMetricsServerServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/metrics-server-service.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerResourceReaderYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x90\x3f\x4f\xc4\x30\x0c\xc5\xf7\x7c\x0a\xeb\xf6\xf4\xc4\x86\xb2\x01\x03\xfb\x21\xb1\xbb\xa9\xb9\x33\x6d\xe3\xca\x76\x8a\xe0\xd3\xa3\x6b\xcb\x1f\x81\x74\x42\x62\xca\x4b\xe2\x9f\x9f\xde\x8b\x31\x06\x9c\xf8\x91\xd4\x58\x4a\x02\x6d\x31\x37\x58\xfd\x24\xca\x6f\xe8\x2c\xa5\xe9\xaf\xad\x61\xd9\xcf\x57\xa1\xe7\xd2\x25\xb8\x1b\xaa\x39\xe9\x41\x06\x0a\x23\x39\x76\xe8\x98\x02\x40\xc1\x91\x12\xd8\xab\x39\x8d\x69\x24\x57\xce\x16\x8d\x74\x26\x0d\x5a\x07\xb2\x14\x22\xe0\xc4\xf7\x2a\x75\xb2\x33\x11\x61\xb7\x0b\x00\x4a\x26\x55\x33\x6d\x6f\x93\x74\xb6\x88\x22\x1d\x7d\x53\x7b\x73\xf4\xed\x8e\x23\xd9\x84\x79\xf9\x9e\x49\xdb\x0d\x3d\x92\x2f\xe7\xc0\xb6\x8a\x17\xf4\x7c\x0a\xff\x0b\x79\xcb\xa5\xe3\x72\xfc\x7b\x56\x19\xe8\x40\x4f\xe7\xb1\x8f\xb4\x17\x2c\x03\xc0\xef\x5a\x2f\x1b\x58\x6d\x9f\x29\xfb\xd2\xe7\xca\x3e\x90\xce\x9c\xe9\x26\x67\xa9\xc5\x3f\xf1\x1f\x1c\x7c\xf5\x96\xa0\xaf\x2d\xc5\x75\x7f\x78\x0f\x00\x00\xff\xff\x39\x82\xcc\x46\x05\x02\x00\x00")

func metricsServerResourceReaderYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerResourceReaderYaml,
		"metrics-server/resource-reader.yaml",
	)
}

func metricsServerResourceReaderYaml() (*asset, error) {
	bytes, err := metricsServerResourceReaderYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/resource-reader.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _rolebindingsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x31\x6f\xe3\x30\x0c\x85\x77\xfd\x0a\x21\xbb\x72\x38\xdc\x72\xf0\xd8\x0e\xdd\x03\xb4\x3b\x6d\xb3\x09\x6b\x59\x14\x48\x2a\x41\xfb\xeb\x0b\xa7\x6e\x82\xa4\x76\x90\xb4\xdd\x24\x41\x7c\x1f\x1f\xf9\x20\xd3\x13\x8a\x12\xa7\xca\x4b\x0d\xcd\x12\x8a\x6d\x58\xe8\x0d\x8c\x38\x2d\xbb\xff\xba\x24\xfe\xb3\xfd\xeb\x3a\x4a\x6d\xe5\xef\x63\x51\x43\x59\x71\xc4\x3b\x4a\x2d\xa5\xb5\xeb\xd1\xa0\x05\x83\xca\x79\x9f\xa0\xc7\xca\x77\xa5\xc6\x00\x99\x14\x65\x8b\x12\x86\x6b\x44\x0b\xd0\xf6\x94\x9c\x70\xc4\x15\x3e\x0f\xbf\x21\xd3\x83\x70\xc9\x17\xc8\xce\xfb\x2f\xe0\x03\x47\x5f\xd5\xb0\xaf\x0e\xfa\x99\x46\x86\x96\xfa\x05\x1b\xd3\xca\x85\x9b\x20\x8f\x8a\x32\xe3\xc2\xb9\x10\x82\xfb\xfe\xb4\x26\xc6\xf4\xd9\xfe\x3f\x0d\x0d\x27\x13\x8e\x11\xc5\x49\x89\x78\xd2\xb8\x0e\x15\xc1\x2f\x16\xce\x7b\x41\xe5\x22\x0d\x8e\x6f\x89\x5b\x54\xe7\xfd\x16\xa5\x1e\x9f\xd6\x68\x57\xd6\x42\x8f\x9a\xa1\x39\x17\x88\xa4\xb6\x3f\xec\xc0\x9a\xcd\x84\x56\x42\xdb\xb1\x74\x94\xd6\xa3\xdf\x29\xf1\x8f\x3f\x99\x23\x35\x74\x33\x61\x42\x10\x53\x9b\x99\x92\xe9\xfe\x96\xb9\x9d\xd3\x1c\xfc\x1f\xb5\x7f\xb8\xb4\xf9\x88\xcf\xec\xee\xf7\xb3\x7d\x0a\x38\x06\x7b\xf0\x78\x1d\xe3\x2c\xdc\x97\x01\xef\x01\x00\x00\xff\xff\x46\xd3\x6d\x9d\x0f\x04\x00\x00")

func rolebindingsYamlBytes() ([]byte, error) {
	return bindataRead(
		_rolebindingsYaml,
		"rolebindings.yaml",
	)
}

func rolebindingsYaml() (*asset, error) {
	bytes, err := rolebindingsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rolebindings.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _traefikYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\xcf\x8a\xdb\x4c\x10\xc4\xef\x7a\x8a\x46\xb0\x47\x49\x9f\x6f\x1f\x73\xdb\x38\x86\x84\x80\xb3\xc4\x49\xae\xa1\x35\x2a\x5b\x83\x47\x33\xa2\xbb\x65\xa2\xfc\x79\xf7\x20\xad\xe3\x0d\x21\x81\x25\xba\xa9\xe7\x57\xd5\x35\xc5\xf0\x18\x3e\x42\x34\xe4\xe4\xa8\x47\x1c\x6a\xcf\x66\x11\x75\xc8\xcd\x65\x53\x9c\x43\xea\x1c\xbd\x42\x1c\xb6\x3d\x8b\x15\x03\x8c\x3b\x36\x76\x05\x51\xe2\x01\x8e\x4c\x18\xc7\x70\xbe\xfe\xeb\xc8\x1e\x8e\xce\x53\x8b\x4a\x67\x35\x0c\x85\x8e\xf0\x0b\xee\x17\x03\x47\xbd\xd9\xa8\xae\x69\xee\xbe\xbe\xf9\xf0\x62\xf7\x6e\xbf\x7b\xbf\x3b\x7c\xba\x7f\x78\xfd\xfd\xae\x51\x63\x0b\xbe\x59\x41\x6d\xae\xc6\xd5\xa6\xfe\x7f\x53\xff\x57\xdb\xe9\x4b\x41\x74\xe1\x38\x41\xb7\x39\x19\x92\x39\xfa\x56\x15\x44\x44\xd2\xf2\xba\x62\xf9\x90\xb8\x8d\xe8\x96\x60\x13\xd6\x99\x6a\xfc\xfb\xe1\x00\x93\xe0\xf5\x27\x30\x4a\x1e\x60\x3d\xa6\xdb\xe4\x4f\xa2\xe5\x7a\x92\x60\xb8\x51\x21\x9d\x04\xaa\xbb\xd4\x8d\x39\x24\x7b\x12\x4f\x8a\x97\x38\xf2\x14\xed\x61\x6a\x63\xd0\x1e\xdd\x01\x72\x09\x1e\xbf\xf8\x8d\x12\xb2\x04\x9b\xb7\x91\x55\xf7\x6b\xad\xe5\x63\x7b\x95\x8f\x93\x1a\xa4\xf2\x12\x2c\x78\x8e\xe5\x2a\x08\x03\x9f\x16\x48\x38\xf9\x1e\xd2\xc4\xd0\x0a\xcb\x5c\x5d\x3b\x7b\x84\x2c\x47\x08\x5b\xc8\xe9\x16\xb3\xa2\x33\x66\x47\xe5\xf6\xea\x76\xdf\x75\x39\xe9\xdb\x14\xe7\xf2\x96\x38\x8f\x8b\x2a\x8b\xa3\x72\xf7\x39\xa8\x69\xf9\x9b\x38\xe5\x0e\x95\xe4\x88\xfa\xa9\x87\xe5\xb9\xf8\x9c\x4c\x72\xac\xc6\xc8\x09\xcf\xf0\x23\xc2\xf1\x08\x6f\x8e\xca\x7d\x3e\xf8\x1e\xdd\x14\xf1\xdc\x65\x03\x2f\xb5\xfc\xfb\x96\x1f\x01\x00\x00\xff\xff\x8e\x38\x58\x4b\xf7\x02\x00\x00")

func traefikYamlBytes() ([]byte, error) {
	return bindataRead(
		_traefikYaml,
		"traefik.yaml",
	)
}

func traefikYaml() (*asset, error) {
	bytes, err := traefikYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "traefik.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ccm.yaml":           ccmYaml,
	"coredns.yaml":       corednsYaml,
	"local-storage.yaml": localStorageYaml,
	"metrics-server/aggregated-metrics-reader.yaml": metricsServerAggregatedMetricsReaderYaml,
	"metrics-server/auth-delegator.yaml":            metricsServerAuthDelegatorYaml,
	"metrics-server/auth-reader.yaml":               metricsServerAuthReaderYaml,
	"metrics-server/metrics-apiservice.yaml":        metricsServerMetricsApiserviceYaml,
	"metrics-server/metrics-server-deployment.yaml": metricsServerMetricsServerDeploymentYaml,
	"metrics-server/metrics-server-service.yaml":    metricsServerMetricsServerServiceYaml,
	"metrics-server/resource-reader.yaml":           metricsServerResourceReaderYaml,
	"rolebindings.yaml":                             rolebindingsYaml,
	"traefik.yaml":                                  traefikYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"ccm.yaml":           &bintree{ccmYaml, map[string]*bintree{}},
	"coredns.yaml":       &bintree{corednsYaml, map[string]*bintree{}},
	"local-storage.yaml": &bintree{localStorageYaml, map[string]*bintree{}},
	"metrics-server": &bintree{nil, map[string]*bintree{
		"aggregated-metrics-reader.yaml": &bintree{metricsServerAggregatedMetricsReaderYaml, map[string]*bintree{}},
		"auth-delegator.yaml":            &bintree{metricsServerAuthDelegatorYaml, map[string]*bintree{}},
		"auth-reader.yaml":               &bintree{metricsServerAuthReaderYaml, map[string]*bintree{}},
		"metrics-apiservice.yaml":        &bintree{metricsServerMetricsApiserviceYaml, map[string]*bintree{}},
		"metrics-server-deployment.yaml": &bintree{metricsServerMetricsServerDeploymentYaml, map[string]*bintree{}},
		"metrics-server-service.yaml":    &bintree{metricsServerMetricsServerServiceYaml, map[string]*bintree{}},
		"resource-reader.yaml":           &bintree{metricsServerResourceReaderYaml, map[string]*bintree{}},
	}},
	"rolebindings.yaml": &bintree{rolebindingsYaml, map[string]*bintree{}},
	"traefik.yaml":      &bintree{traefikYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
